version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: translation_postgres
    environment:
      POSTGRES_DB: translation_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - translation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d translation_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: translation_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: translation_vhost
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,info}]
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - translation_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Translation API
  api-traducao:
    build: 
      context: ./api-traducao
      dockerfile: Dockerfile
    container_name: translation_api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/translation_db
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/translation_vhost
      - API_VERSION=1.0.0
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - translation_network
    volumes:
      - ./api-traducao:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Translation Worker
  servico-traducao:
    build:
      context: ./servico-traducao
      dockerfile: Dockerfile
    container_name: translation_worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/translation_db
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/translation_vhost
      - WORKER_CONCURRENCY=2
      - MAX_RETRIES=3
      - TRANSLATION_TIMEOUT=30000
      - LOG_LEVEL=info
      - HEALTH_CHECK_INTERVAL=30000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - translation_network
    volumes:
      - ./servico-traducao:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: translation_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-traducao
    networks:
      - translation_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local

networks:
  translation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
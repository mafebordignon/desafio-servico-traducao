/**
 * Simula√ß√£o simplificada de conex√£o com RabbitMQ
 */

const amqp = require('amqplib');
const logger = require('../utils/logger');

let connection = null;
let channel = null;

// Fun√ß√£o para conectar ao RabbitMQ
async function connectRabbitMQ() {
  try {
    const rabbitMQUrl = process.env.RABBITMQ_URL || 'amqp://localhost';
    logger.info(`üê∞ Conectando ao RabbitMQ em ${rabbitMQUrl}...`);
    
    connection = await amqp.connect(rabbitMQUrl);
    channel = await connection.createChannel();
    
    logger.info('‚úÖ Conex√£o com RabbitMQ estabelecida');
  } catch (error) {
    logger.error('‚ùå Erro ao conectar ao RabbitMQ:', error);
    throw error;
  }
}

// Fun√ß√£o para testar a conex√£o com RabbitMQ
async function testRabbitMQConnection() {
  try {
    if (!channel) {
      throw new Error('Canal RabbitMQ n√£o est√° inicializado');
    }
    await channel.assertQueue('test_queue', { durable: false });
    logger.info('‚úÖ Conex√£o com RabbitMQ testada com sucesso');
  } catch (error) {
    logger.error('‚ùå Erro ao testar conex√£o com RabbitMQ:', error);
    throw error;
  }
}

// Fun√ß√£o para obter o canal RabbitMQ
function getRabbitMQChannel() {
  if (!channel) {
    throw new Error('Canal RabbitMQ n√£o est√° inicializado. Conecte-se primeiro!');
  }
  return channel;
}

// Fun√ß√£o para fechar a conex√£o com RabbitMQ
async function closeRabbitMQConnection() {
  try {
    if (channel) {
      await channel.close();
      logger.info('‚úÖ Canal RabbitMQ fechado');
    }
    if (connection) {
      await connection.close();
      logger.info('‚úÖ Conex√£o RabbitMQ encerrada');
    }
  } catch (error) {
    logger.error('‚ùå Erro ao fechar conex√£o com RabbitMQ:', error);
    throw error;
  }
}

module.exports = {
  connectRabbitMQ,
  testRabbitMQConnection,
  getRabbitMQChannel,
  closeRabbitMQConnection
};
const { getRabbitMQChannel } = require('../config/rabbitmq');
const logger = require('../utils/logger');

// Fun√ß√£o para criar uma nova tradu√ß√£o
async function createTranslation(req, res) {
  try {
    const { text, targetLanguage } = req.body;

    if (!text || !targetLanguage) {
      return res.status(400).json({
        error: 'Bad Request',
        message: 'Os campos "text" e "targetLanguage" s√£o obrigat√≥rios'
      });
    }

    const channel = getRabbitMQChannel();
    const queueName = process.env.TRANSLATION_QUEUE || 'translation_queue';

    const translationRequest = {
      text,
      targetLanguage,
      timestamp: new Date().toISOString()
    };

    await channel.sendToQueue(queueName, Buffer.from(JSON.stringify(translationRequest)));
    logger.info('üì§ Tradu√ß√£o enviada para a fila', translationRequest);

    res.status(202).json({
      message: 'Tradu√ß√£o enviada para processamento',
      request: translationRequest
    });
  } catch (error) {
    logger.error('‚ùå Erro ao criar tradu√ß√£o:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: 'Erro ao processar a tradu√ß√£o'
    });
  }
}

// Fun√ß√£o para listar tradu√ß√µes (exemplo de endpoint para hist√≥rico)
async function listTranslations(req, res) {
  try {
    // Aqui voc√™ pode implementar l√≥gica para buscar tradu√ß√µes do banco de dados
    const translations = []; // Exemplo: lista vazia
    res.status(200).json({
      message: 'Lista de tradu√ß√µes',
      translations
    });
  } catch (error) {
    logger.error('‚ùå Erro ao listar tradu√ß√µes:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: 'Erro ao buscar tradu√ß√µes'
    });
  }
}

module.exports = {
  createTranslation,
  listTranslations
};